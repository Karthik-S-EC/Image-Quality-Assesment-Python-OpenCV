# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yPD3iuq4gwFPKJOBBMgWjxOVVh3wq-tp
"""

import cv2
import skimage
from skimage.restoration import estimate_sigma
import matplotlib.pyplot as plt
import numpy as np

def averaging(img):
    return cv2.blur(img, (5,5))

def gaussianBlurr(img,k):
    return cv2.GaussianBlur(img, (k,k), 0)

def bilateralfilter(img):
    return cv2.bilateralFilter(img, 9, 75, 75)

def motion_blur(img):
    size = 15
    kernel_motion_blur = np.zeros((size, size))
    kernel_motion_blur[int((size-1)/2), :] = np.ones(size)
    kernel_motion_blur = kernel_motion_blur / size
    return cv2.filter2D(img, -1, kernel_motion_blur)

def detectBlur(img):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    return cv2.Laplacian(gray, cv2.CV_64F).var()

def plotImages(img,ttl, r, c, i):
    plt.subplot(r,c,i)
    img1 = img.copy()
    img1[:, :, 0] = img[:, :, 2]
    img1[:, :, 2] = img[:, :, 0]
    plt.imshow(img1)
    plt.title(ttl)
    plt.axis('off')
    return

img = cv2.imread("KAMATH.png")
#img = cv2.resize(img, (int(img.shape[1]*0.6), int(img.shape[0]*0.6)), interpolation= cv2.INTER_AREA)

''' Blurr Addition
plt.figure(figsize=(18,24))
plotImages(averaging(img),'Avg', 4 , 2, 1)
plotImages(gaussianBlurr(img),'Gaussian', 4 , 2, 2)
plotImages(motion_blur(img),'Motion Blur', 4 , 2, 4)
'''
''' Blur detection ''' 

print(detectBlur(averaging(img)))
print(detectBlur(gaussianBlurr(img,5)))
print(detectBlur(gaussianBlurr(img,11)))
print(detectBlur(bilateralfilter(img)))

def medianFilter(img):
    return cv2.medianBlur(img, 3)

def meanFilter(img):
    kernel = np.ones((3,3),np.float32)/9
    return cv2.filter2D(img, -1, kernel)

''' Noise Addition '''
#mean = (0,0,0)
#std_dev = (15,15,15)
#cv2.randn(img1, mean, std_dev)
#gauss_noise = img+img1                      #Gausssian Noise
gauss_noise = skimage.util.random_noise(img, mode='gaussian',var=0.01)
salt_pepper_noise = skimage.util.random_noise(img, mode='s&p')

cv2.imwrite('gauss_noise.png',(gauss_noise*255).astype(int))
#cv2.imwrite('gauss_noise.png',gauss_noise)
cv2.imwrite('s&p.png',(salt_pepper_noise*255).astype(int))

#gauss_blur = cv2.GaussianBlur(img, (5,5), 0) #Gaussian Blur

''' Filtering '''
gauss = cv2.imread('gauss_noise.png')
s_and_p = cv2.imread('s&p.png')

r=6
c=2
plt.figure(figsize=(15,35))

''' Noises'''

plotImages(gauss_noise, 'Gaussian Noise',r,c,1)
plotImages(salt_pepper_noise,'s&p',r,c,2)

''' Median Filter '''

plotImages(medianFilter(gauss),'Median Filter on Gaussian Noise',r,c,3)
plotImages(medianFilter(s_and_p),'Median Filter on s&p Noise',r,c,4)
cv2.imwrite('Gaussian_Noise_Median_Filter.png',medianFilter(gauss))
cv2.imwrite('s&p_Noise_Median_Filter.png',medianFilter(s_and_p))

''' Mean Filter '''

plotImages(meanFilter(gauss),'Mean Filter on Gaussian Noise',r,c,5)
plotImages(meanFilter(s_and_p),'Mean Filter on s&p Noise',r,c,6)
cv2.imwrite('Gaussian_Noise_Mean_Filter.png',meanFilter(gauss))
cv2.imwrite('s&p_Noise_Mean_Filter.png',meanFilter(s_and_p))

''' Detection of Noise '''
print("Amount of Noise measured in Sigma (Gaussian Noise): {:.2f}".format(estimate_sigma(gauss_noise, average_sigmas=True, multichannel=True)))
print("Amount of Noise measured in Sigma (Salt and Pepper Noise): {:.2f}".format(estimate_sigma(salt_pepper_noise, average_sigmas=True, multichannel=True)))

print(np.std(gauss_noise))
print(np.std(salt_pepper_noise))

'''
cv2.imshow('Original Image',img)
cv2.waitKey()
cv2.destroyAllWindows()
'''

def main(img):    
    imglist=[]
    imglist.append(averaging(img))
    imglist.append(gaussianBlurr(img,5))
    imglist.append(gaussianBlurr(img,11)) 
    imglist.append(bilateralfilter(img))
    gauss_noise = skimage.util.random_noise(img, mode='gaussian',var=0.01)
    imglist.append(medianFilter(gauss_noise)) 
    #imglist.append(medianFilter(s_and_p))
    imglist.append(meanFilter(gauss_noise)) 
    #imglist.append(meanFilter(s_and_p))

    print(imglist)

